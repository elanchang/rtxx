#include <FreeRTOS.h>
#include <bsp.h>
#include <task.h>
#include <queue.h>
#include <nonstdlib.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>
#include <stdbool.h>
#include <libmid_nvram/snx_mid_nvram.h>
#include <wifi/wifi_api.h>
#include "lwip/dhcps.h"
#include "rtmp_error.h"
#include "rtmp_socket.h"
#include "rtmp_utils.h"



static int socket_set_keepalive(int fd)
{
	int on = 1;
	if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (void *)&on, sizeof(on)) < 0) {
		print_msg("Failed to set KEEPALIVE\n");
		return pdFAIL;
	}

	return pdPASS;
}


void srs_blocksync_socket_init(struct SrsBlockSyncSocket* srcblocksyncsocket){

    srcblocksyncsocket->stm =SRS_CONSTS_NO_TMMS;
    srcblocksyncsocket->rtm = SRS_CONSTS_NO_TMMS;
    srcblocksyncsocket->rbytes=0;
    srcblocksyncsocket->sbytes=0;
    SOCKET_RESET(srcblocksyncsocket->fd);
    SOCKET_SETUP();
	vSemaphoreCreateBinary(srcblocksyncsocket->mutex);
	if (!srcblocksyncsocket->mutex) {
        srs_error("srcblocksyncsocket->mutex failed\n");
		return ;
	}  
}

void srs_blocksync_socket_uinit(struct SrsBlockSyncSocket* srcblocksyncsocket){

    SOCKET_CLOSE(srcblocksyncsocket->fd);
    SOCKET_CLEANUP();
    vSemaphoreDelete(srcblocksyncsocket->mutex);
}


srs_hijack_io_t srs_hijack_io_create(){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)malloc(sizeof(struct SrsBlockSyncSocket)); 
    memset(skt,0,sizeof(struct SrsBlockSyncSocket));
    srs_blocksync_socket_init(skt);
    return skt;
}

void srs_hijack_io_destroy(srs_hijack_io_t ctx){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    srs_blocksync_socket_uinit(skt);
    srs_freep(skt);
}

int srs_hijack_io_create_socket(srs_hijack_io_t ctx){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;    
    skt->fd = socket(AF_INET, SOCK_STREAM, 0);
    if (!SOCKET_VALID(skt->fd)) {
        return ERROR_SOCKET_CREATE;
    }
    socket_set_keepalive(skt->fd);
    return ERROR_SUCCESS;
}

int srs_hijack_io_connect(srs_hijack_io_t ctx, const char* server_ip, int port){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;   
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    addr.sin_addr.s_addr = inet_addr(server_ip);
    if(connect(skt->fd, (const struct sockaddr*)&addr, sizeof(struct sockaddr_in)) < 0){
        return ERROR_SOCKET_CONNECT;
    }
 
    return ERROR_SUCCESS;
}

int srs_hijack_io_read(srs_hijack_io_t ctx, void* buf, size_t size, ssize_t* nread){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    int ret = ERROR_SUCCESS;
    xSemaphoreTake(skt->mutex, portMAX_DELAY); 
    ssize_t nb_read = recv(skt->fd, (char*)buf, size, 0);  
    if (nread) {
        *nread = nb_read;
    } 
    // On success a non-negative integer indicating the number of bytes actually read is returned 
    // (a value of 0 means the network connection is closed or end of file is reached).
    if (nb_read <= 0) {       
        if (nb_read < 0 && SOCKET_ERRNO() == SOCKET_ETIME) {
            xSemaphoreGive(skt->mutex);
            return ERROR_SOCKET_TIMEOUT;
        }        
        if (nb_read == 0) {
            errno = SOCKET_ECONNRESET;
        }
        xSemaphoreGive(skt->mutex);
        return ERROR_SOCKET_READ;
    }
    skt->rbytes += nb_read; 
    xSemaphoreGive(skt->mutex);
    return ret;
}

int srs_hijack_io_set_recv_timeout(srs_hijack_io_t ctx, int64_t recvtimeout){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
     int64_t recv_time_out;
    // The default for this option is zero,
    // which indicates that a receive operation shall not time out.
    if (recvtimeout != SRS_CONSTS_NO_TMMS) {
        recv_time_out=recvtimeout;
    }    
    if (setsockopt(skt->fd, SOL_SOCKET, SO_RCVTIMEO,(char *)&recv_time_out,sizeof(int)) == -1) {
        return SOCKET_ERRNO();
    }
    skt->rtm = recvtimeout;  
    return ERROR_SUCCESS;
}

int64_t srs_hijack_io_get_recv_timeout(srs_hijack_io_t ctx){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    return skt->rtm;
}

int64_t srs_hijack_io_get_recv_bytes(srs_hijack_io_t ctx){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    return skt->rbytes;
}


int srs_hijack_io_set_send_timeout(srs_hijack_io_t ctx, int64_t sendtimeout){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    int64_t send_time_out;
    // The default for this option is zero,
    // which indicates that a receive operation shall not time out.  
    if (sendtimeout != SRS_CONSTS_NO_TMMS) {
       send_time_out=sendtimeout;
    } 
    if (setsockopt(skt->fd, SOL_SOCKET, SO_SNDTIMEO, (char *)&send_time_out,sizeof(int)) == -1) {
        return SOCKET_ERRNO();
    }
    skt->stm = sendtimeout; 
    return ERROR_SUCCESS;
}

int64_t srs_hijack_io_get_send_timeout(srs_hijack_io_t ctx){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    return skt->stm;
}

int64_t srs_hijack_io_get_send_bytes(srs_hijack_io_t ctx){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    return skt->sbytes;
}


ssize_t writev(srs_hijack_io_t ctx,int fd, struct iovec *iov, int iovcnt)
{
    ssize_t nwrite = 0;
    int i=0;
    int error = 0;
    unsigned long optlen = sizeof(error);
    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    
  
    for (i = 0; i < iovcnt; i++) {
        struct iovec* current = iov + i;
        int nsent =send(fd, (char*)current->iov_base, current->iov_len, 0);
        if (nsent < 0) {
            int ret = lwip_getsockopt(fd, SOL_SOCKET, SO_ERROR, &error, &optlen);
            //print_msg("WARNING writev nsent < 0 error=0x%2x\n",error);
            return nsent;
        }
        //if(nsent!=current->iov_len)
        //  print_msg("nsent!=current->iov_len nsent!=current->iov_len nsent!=current->iov_len\n");
        nwrite += nsent;
        if (nsent == 0) {
            return nwrite;
        }
    }
 
    return nwrite;
}


int srs_hijack_io_writev(srs_hijack_io_t ctx, struct iovec *iov, int iov_size, size_t* nwrite){

    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;
    int ret = ERROR_SUCCESS;
    //xSemaphoreTake(skt->mutex, portMAX_DELAY); 
    size_t nb_write = writev(ctx,skt->fd, iov, iov_size);
    if (nwrite) {
        *nwrite = nb_write;
    } 
    // On  success,  the  readv()  function  returns the number of bytes read; 
    // the writev() function returns the number of bytes written.  On error, -1 is
    // returned, and errno is set appropriately.
    if (nb_write <= 0) {
        // @see https://github.com/ossrs/srs/issues/200
        if (nb_write < 0 && SOCKET_ERRNO() == SOCKET_ETIME) {
            return ERROR_SOCKET_TIMEOUT;
        }
        
        return ERROR_SOCKET_WRITE;
    }
    skt->sbytes += nb_write;
    //xSemaphoreGive(skt->mutex);
    return ret;
  
}

int srs_hijack_io_is_never_timeout(srs_hijack_io_t ctx, int64_t tm){

    return tm == SRS_CONSTS_NO_TMMS;
}

int srs_hijack_io_read_fully(srs_hijack_io_t ctx, void* buf, size_t size, ssize_t* nread){

     struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx; 
     int ret = ERROR_SUCCESS;
     
     size_t left = size;
     ssize_t nb_read = 0;
     
     while (left > 0) {
         char* this_buf = (char*)buf + nb_read;
         ssize_t this_nread;
         
         if ((ret = srs_hijack_io_read(ctx, this_buf, left, &this_nread)) != ERROR_SUCCESS) {
             return ret;
         }
         
         nb_read += this_nread;
         left -= (size_t)this_nread;
     }
     if (nread) {
         *nread = nb_read;
     }
     skt->rbytes += nb_read;
     return ret;
}


int srs_hijack_io_write(srs_hijack_io_t ctx, void* buf, size_t size, ssize_t* nwrite){
    struct SrsBlockSyncSocket* skt = (struct SrsBlockSyncSocket*)ctx;    
    int ret = ERROR_SUCCESS;

    ssize_t nb_write = send(skt->fd, (char*)buf, size, 0);
    if (nwrite) {
        *nwrite = nb_write;
    }
    
    if (nb_write <= 0) {
        // @see https://github.com/ossrs/srs/issues/200
        if (nb_write < 0 && SOCKET_ERRNO() == SOCKET_ETIME) {
            print_msg("srs_hijack_io_write NG1\n"); 
            return ERROR_SOCKET_TIMEOUT;
        }
        print_msg("srs_hijack_io_write NG2\n"); 
        return ERROR_SOCKET_WRITE;
    }
    skt->sbytes += nb_write; 
    return ret;
}


struct SimpleSocketStream* srs_simple_socket_init(){

    struct SimpleSocketStream* simplesocketstream = (struct SimpleSocketStream*)malloc(sizeof(struct SimpleSocketStream));
    memset(simplesocketstream,0,sizeof(struct SimpleSocketStream));
    simplesocketstream->io = srs_hijack_io_create();
    return simplesocketstream;
}

void srs_simple_socket_uinit(struct        SimpleSocketStream* simplesocketstream){

    if (simplesocketstream->io) {
        srs_hijack_io_destroy(simplesocketstream->io);
        simplesocketstream->io = NULL;
    }
    srs_freep(simplesocketstream);  
}

srs_hijack_io_t srs_simple_socket_hijack_io(struct         SimpleSocketStream* simplesocketstream){

    return simplesocketstream->io;
}

int srs_simple_socket_create_socket(struct          SimpleSocketStream* simplesocketstream){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_create_socket(simplesocketstream->io);
}

int srs_simple_socket_connect(struct        SimpleSocketStream* simplesocketstream,const char* server_ip, int port){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_connect(simplesocketstream->io, server_ip, port);
}

int srs_simple_socket_read(struct       SimpleSocketStream* simplesocketstream,void* buf, size_t size, ssize_t* nread){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_read(simplesocketstream->io, buf, size, nread);
}


void srs_simple_socket_set_recv_timeout(struct           SimpleSocketStream* simplesocketstream,int64_t recv_time_out){

    srs_assert(simplesocketstream->io);
    srs_hijack_io_set_recv_timeout(simplesocketstream->io, recv_time_out);
}

int64_t srs_simple_socket_get_recv_timeout(struct          SimpleSocketStream* simplesocketstream){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_get_recv_timeout(simplesocketstream->io);
}

int64_t srs_simple_socket_get_recv_bytes(struct         SimpleSocketStream* simplesocketstream){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_get_recv_bytes(simplesocketstream->io);
}

void srs_simple_socket_set_send_timeout(struct         SimpleSocketStream* simplesocketstream,int64_t send_time_out){

    srs_assert(simplesocketstream->io);
    srs_hijack_io_set_send_timeout(simplesocketstream->io, send_time_out);
}

int64_t srs_simple_socket_get_send_timeout(struct          SimpleSocketStream* simplesocketstream){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_get_send_timeout(simplesocketstream->io);
}

int64_t srs_simple_socket_get_send_bytes(struct         SimpleSocketStream* simplesocketstream){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_get_send_bytes(simplesocketstream->io);
}

int srs_simple_socket_writev(struct       SimpleSocketStream* simplesocketstream,struct iovec *iov, int iov_size, size_t* nwrite){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_writev(simplesocketstream->io, iov, iov_size, nwrite);
}


bool srs_simple_socket_is_never_timeout(struct          SimpleSocketStream* simplesocketstream,int64_t tm){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_is_never_timeout(simplesocketstream->io, tm);
}

int srs_simple_socket_read_fully(struct        SimpleSocketStream* simplesocketstream,void* buf, size_t size, ssize_t* nread){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_read_fully(simplesocketstream->io, buf, size, nread);
}

int srs_simple_socket_write(struct       SimpleSocketStream* simplesocketstream,void* buf, size_t size, ssize_t* nwrite){

    srs_assert(simplesocketstream->io);
    return srs_hijack_io_write(simplesocketstream->io, buf, size, nwrite);
}

